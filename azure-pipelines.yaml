trigger:
- main

pool:
  name: "ap1"

stages:
# ----------------------
# 1. Build
# ----------------------
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: "Use Node.js"

    - script: |
        npm install --production
        zip -r app.zip *
      displayName: "Build and Zip App"
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)/app.zip"
        artifactName: "drop"
      displayName: "Publish Artifact"

# ----------------------
# 2. Test
# ----------------------
- stage: Test
  displayName: "Smoke Test Stage"
  dependsOn: Build
  jobs:
  - job: SmokeTest
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - script: |
        mkdir test
        cd test
        unzip $(Pipeline.Workspace)/drop/app.zip
        npm install --production
        nohup npm start &
        sleep 5
        curl -f http://localhost:3001
      displayName: "Run Smoke Test"

# ----------------------
# 3. Deploy (VM → SIG → VMSS)
# ----------------------
- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Test
  jobs:
  - job: DeployAndCapture
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - task: AzureCLI@2
      inputs:
        azureSubscription: "azconnsvc"
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RESOURCE_GROUP="finalpocgroup"
          LOCATION="northcentralus"
          VM_NAME="tempvm-$(Build.BuildId)"  # Make VM name unique
          IMAGE_DEF="defvm"
          GALLERY_NAME="gal2"
          VMSS_NAME="vmss1"
          VMSS_RESOURCE_GROUP="vmss1_group"
          STORAGE_ACCOUNT="shubhstac"
          CONTAINER_NAME="artifact"
          ARTIFACT_PATH="$(Pipeline.Workspace)/drop/app.zip"
 
          echo "=== Step 0: Upload app.zip to storage (after smoke test passed) ==="
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --file $ARTIFACT_PATH \
            --name app.zip \
            --auth-mode login \
            --overwrite

          echo "=== Step 1: Create temporary VM ==="
          az vm create \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --image Ubuntu2204 \
            --admin-username azureuser \
            --generate-ssh-keys \
            --public-ip-sku Standard \
            --size Standard_B2ms \
            --location $LOCATION

          # Wait for VM to be fully provisioned
          echo "Waiting for VM to be fully provisioned..."
          sleep 30

          echo "=== Step 2: Install application on VM ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts @"$(System.DefaultWorkingDirectory)/install_app.sh"

          # Wait for installation to complete
          echo "Waiting for application installation to complete..."
          sleep 60

          echo "=== Step 3: Refresh authentication token ==="
          # Refresh the token to avoid expiration issues
          az account get-access-token > /dev/null

          echo "=== Step 4: Stop VM services and prepare for capture ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop walinuxagent
              sudo rm -rf /var/lib/waagent/*
              sudo rm -f /var/log/waagent.log
              sudo cloud-init clean --seed --logs
              sudo rm -rf /var/lib/cloud/
              sudo sync
            "

          echo "=== Step 5: Deallocate and generalize VM ==="
          # Refresh token before long-running operations
          az account get-access-token > /dev/null
          
          az vm deallocate \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME

          az vm generalize \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME

          echo "=== Step 6: Create new SIG version ==="
          # Refresh token again before SIG operations
          az account get-access-token > /dev/null
          
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          # Get latest version and increment
          LATEST_VERSION=$(az sig image-version list \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --query "max_by([], &name).name" -o tsv 2>/dev/null || echo "")

          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            NEW_VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "Creating new version: $NEW_VERSION"

          # Create image version from the generalized VM
          az sig image-version create \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --gallery-image-version $NEW_VERSION \
            --managed-image "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/virtualMachines/$VM_NAME" \
            --replica-count 1 \
            --target-regions $LOCATION

          echo "=== Step 7: Wait for image version creation to complete ==="
          echo "Waiting for image version creation..."
          
          TIMEOUT=1800  # 30 minutes timeout
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Refresh token periodically during long waits
            if [ $((ELAPSED % 300)) -eq 0 ]; then
              az account get-access-token > /dev/null
            fi
            
            PROVISIONING_STATE=$(az sig image-version show \
              --resource-group $RESOURCE_GROUP \
              --gallery-name $GALLERY_NAME \
              --gallery-image-definition $IMAGE_DEF \
              --gallery-image-version $NEW_VERSION \
              --query provisioningState -o tsv 2>/dev/null || echo "NotFound")
            
            echo "Current provisioning state: $PROVISIONING_STATE (${ELAPSED}s elapsed)"
            
            if [ "$PROVISIONING_STATE" = "Succeeded" ]; then
              echo "Image version created successfully"
              break
            elif [ "$PROVISIONING_STATE" = "Failed" ]; then
              echo "Image version creation failed"
              exit 1
            fi
            
            sleep 30
            ELAPSED=$((ELAPSED + 30))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timeout waiting for image version creation"
            exit 1
          fi

          echo "=== Step 8: Update VMSS to new version ==="
          # Refresh token before VMSS operations
          az account get-access-token > /dev/null
          NEW_IMAGE_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/galleries/$GALLERY_NAME/images/$IMAGE_DEF/versions/$NEW_VERSION"
          
          az vmss update \
            --resource-group $VMSS_RESOURCE_GROUP \
            --name $VMSS_NAME \
            --set virtualMachineProfile.storageProfile.imageReference.id="$NEW_IMAGE_ID"

          echo "=== Step 8: Update VMSS instances ==="
          az vmss update-instances \
            --resource-group $VMSS_RESOURCE_GROUP \
            --name $VMSS_NAME \
            --instance-ids '*'

          echo "=== Step 9: Cleanup temporary VM ==="
          # Final token refresh before cleanup
          az account get-access-token > /dev/null
          az vm delete \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --yes \
            --no-wait

          # Clean up associated resources
          az disk delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}_OsDisk_1_*" \
            --yes \
            --no-wait 2>/dev/null || true

          az network public-ip delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}PublicIP" \
            --no-wait 2>/dev/null || true

          az network nsg delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}NSG" \
            --no-wait 2>/dev/null || true

          az network vnet delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}VNET" \
            --no-wait 2>/dev/null || true

          echo "=== Deployment completed successfully ==="
          echo "New image version: $NEW_VERSION"
          echo "VMSS updated with new image"