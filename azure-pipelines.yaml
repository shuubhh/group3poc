trigger:
- main
 
pool:
  name: "ap1"
 
stages:
# ----------------------
# 1. Build
# ----------------------
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: "Use Node.js"
 
    - script: |
        npm install --production
        zip -r app.zip *
      displayName: "Build and Zip App"
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)/app.zip"
        artifactName: "drop"
      displayName: "Publish Artifact"
 
# ----------------------
# 2. Test
# ----------------------
- stage: Test
  displayName: "Smoke Test Stage"
  dependsOn: Build
  jobs:
  - job: SmokeTest
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'
 
    - script: |
        mkdir test
        cd test
        unzip $(Pipeline.Workspace)/drop/app.zip
        npm install --production
        nohup npm start &
        sleep 5
        curl -f http://localhost:3001
      displayName: "Run Smoke Test"
# ----------------------
# 3. Deploy (VM → SIG → VMSS)
# ----------------------
- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Test
  jobs:
  - job: DeployAndCapture
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'
 
    - task: AzureCLI@2
      inputs:
        azureSubscription: "azconnsvc"
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RESOURCE_GROUP="finalpocgroup"
          LOCATION="northcentralus"
          VM_NAME="buildvm"
          IMAGE_DEF="defvm"
          GALLERY_NAME="gal2"
          VMSS_NAME="vmss1"
          STORAGE_ACCOUNT="shubhstac"
          CONTAINER_NAME="artifact"
          ARTIFACT_PATH="$(Pipeline.Workspace)/drop/app.zip"
 
          echo "=== Step 0: Upload app.zip to storage (after smoke test passed) ==="
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --file $ARTIFACT_PATH \
            --name app.zip \
            --auth-mode login \
            --overwrite
 
          echo "=== Step 1: Create temporary VM ==="
          az vm create \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --image Ubuntu2204 \
            --admin-username azureuser \
            --generate-ssh-keys \
            --public-ip-sku Standard \
            --size Standard_B2ms
 
          echo "=== Step 2: Upload and run install_app.sh ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts @"$(System.DefaultWorkingDirectory)/install_app.sh"
 
          echo "=== Step 3: Deprovision VM for capture ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts "sudo waagent -deprovision+user -force"
 
          az vm deallocate -g $RESOURCE_GROUP -n $VM_NAME
          az vm generalize -g $RESOURCE_GROUP -n $VM_NAME
 
          echo "=== Step 4: Create new SIG version ==="
          LATEST_VERSION=$(az sig image-version list \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --query "[-1].name" -o tsv)
 
          if [ -z "$LATEST_VERSION" ]; then
            NEW_VERSION="0.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
 
          echo "New version will be: $NEW_VERSION"
 
          az sig image-version create \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --gallery-image-version $NEW_VERSION \
            --managed-image "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/virtualMachines/$VM_NAME"
 
          echo "=== Step 5: Update VMSS to new version ==="
          az vmss update \
            --resource-group vmss1_group \
            --name $VMSS_NAME \
            --set virtualMachineProfile.storageProfile.imageReference.id="/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/galleries/$GALLERY_NAME/images/$IMAGE_DEF/versions/$NEW_VERSION"
 
          az vmss update-instances \
            --resource-group vmss1_group \
            --name $VMSS_NAME \
            --instance-ids '*'
 
          echo "=== Step 6: Cleanup temp VM ==="
          az vm delete -g $RESOURCE_GROUP -n $VM_NAME --yes