trigger:
- main
 
pool:
  name: "ap1"
 
stages:
# ----------------------
# 1. Build
# ----------------------
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: "Use Node.js"
 
    - script: |
        npm install --production
        zip -r app.zip *
      displayName: "Build and Zip App"
 
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)/app.zip"
        artifactName: "drop"
      displayName: "Publish Artifact"
 
# ----------------------
# 2. Test
# ----------------------
- stage: Test
  displayName: "Smoke Test Stage"
  dependsOn: Build
  jobs:
  - job: SmokeTest
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'
 
    - script: |
        mkdir test
        cd test
        unzip $(Pipeline.Workspace)/drop/app.zip
        npm install --production
        nohup npm start &
        sleep 5
        curl -f http://localhost:3000
      displayName: "Run Smoke Test"
 
# ----------------------
# ----------------------
# 3. Deploy (Image Builder + Gallery + VMSS)
# ----------------------
- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Test
  jobs:
  - job: CreateImage
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'
 
    - task: AzureCLI@2
      inputs:
        azureSubscription: "azconnsvc"
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RESOURCE_GROUP="finalpocgroup"
          GALLERY_NAME="gal1"
          IMAGE_DEF="vmdef1"
          IMAGE_TEMPLATE="vmdef1temp"
          LOCATION="NorthCentralUS"
          STORAGE_ACCOUNT="shubhstac"
          CONTAINER_NAME="artifacts"
          ARTIFACT_PATH="$(Pipeline.Workspace)/drop/app.zip"
 
          echo "=== Detecting latest image version ==="
          LATEST_VERSION=$(az sig image-version list \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --query "[-1].name" -o tsv)
 
          if [ -z "$LATEST_VERSION" ]; then
            # If no version exists yet, start at 0.0.0
            NEW_VERSION="0.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
 
          echo "Using new image version: $NEW_VERSION"
 
          echo "=== Uploading artifact to storage ==="
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --file $ARTIFACT_PATH \
            --name app.zip \
            --auth-mode login \
            --overwrite
 
          echo "=== Running Image Builder (this may take a while) ==="
          az image builder run \
            --name $IMAGE_TEMPLATE \
            --resource-group $RESOURCE_GROUP
 
          echo "=== New image version $NEW_VERSION created in Azure Compute Gallery ==="

