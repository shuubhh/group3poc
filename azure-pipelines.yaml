trigger:
- main

pool:
  name: "ap1"

stages:
# ----------------------
# 1. Build
# ----------------------
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: "Use Node.js"

    - script: |
        npm install --production
        zip -r app.zip *
      displayName: "Build and Zip App"
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)/app.zip"
        artifactName: "drop"
      displayName: "Publish Artifact"

# ----------------------
# 2. Test
# ----------------------
- stage: Test
  displayName: "Smoke Test Stage"
  dependsOn: Build
  jobs:
  - job: SmokeTest
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - script: |
        mkdir test
        cd test
        unzip $(Pipeline.Workspace)/drop/app.zip
        npm install --production
        nohup npm start &
        sleep 5
        curl -f http://localhost:3001
      displayName: "Run Smoke Test"

# ----------------------
# 3. Deploy (VM → SIG → VMSS)
# ----------------------
- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Test
  jobs:
  - job: DeployAndCapture
    timeoutInMinutes: 120  # 2 hours timeout
    cancelTimeoutInMinutes: 5  # 5 minutes to cancel gracefully
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        downloadPath: '$(Pipeline.Workspace)'

    - task: AzureCLI@2
      displayName: "Complete VM to SIG to VMSS Deployment"
      inputs:
        azureSubscription: "azconnsvc"
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RESOURCE_GROUP="finalpocgroup"
          LOCATION="northcentralus"
          VM_NAME="tempvm-$(Build.BuildId)"
          IMAGE_DEF="defvm"
          GALLERY_NAME="gal2"
          VMSS_NAME="vmss1"
          VMSS_RESOURCE_GROUP="vmss1_group"
          STORAGE_ACCOUNT="shubhstac"
          CONTAINER_NAME="artifact"
          ARTIFACT_PATH="$(Pipeline.Workspace)/drop/app.zip"
 
          echo "=== Step 1: Upload app.zip to storage ==="
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT \
            --container-name $CONTAINER_NAME \
            --file $ARTIFACT_PATH \
            --name app.zip \
            --auth-mode login \
            --overwrite

          echo "=== Step 2: Create temporary VM ==="
          az vm create \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --image Ubuntu2204 \
            --admin-username azureuser \
            --generate-ssh-keys \
            --public-ip-sku Standard \
            --size Standard_B2ms \
            --location $LOCATION

          echo "Waiting for VM to be fully provisioned..."
          sleep 30

          echo "=== Step 3: Install application on VM ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts @"$(System.DefaultWorkingDirectory)/install_app.sh"

          echo "=== Step 4: Prepare VM for capture ==="
          az vm run-command invoke \
            --resource-group $RESOURCE_GROUP \
            --name $VM_NAME \
            --command-id RunShellScript \
            --scripts "
              echo 'Stopping walinuxagent...'
              sudo systemctl stop walinuxagent || true
              echo 'Cleaning waagent data...'
              sudo rm -rf /var/lib/waagent/* || true
              sudo rm -f /var/log/waagent.log || true
              echo 'Running cloud-init clean...'
              sudo cloud-init clean --seed --logs || true
              sudo rm -rf /var/lib/cloud/ || true
              echo 'Syncing filesystem...'
              sudo sync
              echo 'VM preparation complete'
            "

          echo "=== Step 5: Deallocate and generalize VM ==="
          az vm deallocate --resource-group $RESOURCE_GROUP --name $VM_NAME
          az vm generalize --resource-group $RESOURCE_GROUP --name $VM_NAME

          echo "=== Step 6: Create new SIG version ==="
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          LATEST_VERSION=$(az sig image-version list \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --query "max_by([], &name).name" -o tsv 2>/dev/null || echo "")

          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            NEW_VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "Creating image version: $NEW_VERSION"

          # Start image creation and wait for completion
          az sig image-version create \
            --resource-group $RESOURCE_GROUP \
            --gallery-name $GALLERY_NAME \
            --gallery-image-definition $IMAGE_DEF \
            --gallery-image-version $NEW_VERSION \
            --managed-image "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/virtualMachines/$VM_NAME" \
            --replica-count 1 \
            --target-regions $LOCATION

          echo "✅ Image version created: $NEW_VERSION"

          echo "=== Step 7: Update VMSS to new version ==="
          NEW_IMAGE_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/galleries/$GALLERY_NAME/images/$IMAGE_DEF/versions/$NEW_VERSION"
          
          az vmss update \
            --resource-group $VMSS_RESOURCE_GROUP \
            --name $VMSS_NAME \
            --set virtualMachineProfile.storageProfile.imageReference.id="$NEW_IMAGE_ID"

          az vmss update-instances \
            --resource-group $VMSS_RESOURCE_GROUP \
            --name $VMSS_NAME \
            --instance-ids '*'

          echo "=== Step 8: Cleanup temp VM ==="
          az vm delete -g $RESOURCE_GROUP -n $VM_NAME --yes --no-wait

          # Clean up associated resources
          az disk delete \
            --ids $(az disk list --resource-group $RESOURCE_GROUP --query "[?contains(name, '$VM_NAME')].id" -o tsv) \
            --yes \
            --no-wait 2>/dev/null || echo "No disks to cleanup"

          az network public-ip delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}PublicIP" \
            --no-wait 2>/dev/null || echo "Public IP cleanup skipped"

          az network nsg delete \
            --resource-group $RESOURCE_GROUP \
            --name "${VM_NAME}NSG" \
            --no-wait 2>/dev/null || echo "NSG cleanup skipped"

          echo "=== Deployment completed successfully ==="
          echo "✅ VMSS updated with new image version: $NEW_VERSION"